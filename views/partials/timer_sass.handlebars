@import url('https://fonts.googleapis.com/css?family=Montserrat:700');

$timer_unit: 1s;
$timer_length: {{timerLength}};
$timer_delay: 1s;

$starting_hue: 160;
$hue_increment: 360 / $timer_length;

@mixin scale_timer($scale) {
  $x: $scale;
  width: 35vmin * $x;
  height: 35vmin * $x;
  box-shadow: 0 0 0 (0.875vmin * $x), inset (1.75vmin * $x) (1.75vmin * $x) (3.5vmin * $x) rgba(black, 0.125), (1.75vmin * $x) (1.75vmin * $x) (3.5vmin * $x) rgba(black, 0.125);
  font-size: 15.5vmin * $x;
  text-shadow: (1.75vmin * $x) (1.75vmin * $x) (3.5vmin * $x) rgba(black, 0.125);
}

#answerTimer {
  background-color: hsl($starting_hue, 80, 60);
  font-family: 'Montserrat', sans-serif;

  @at-root {
    @keyframes background_color {
      @for $i from 1 through $timer_length + 1 {
        #{100% / $timer_length * $i} {
          $hue: $hue_increment * $i * 2;
          background-color: hsl($starting_hue + $hue, 80, 60);
        }
      }
    }
  }
}
#answerTimer {
  @include scale_timer(1.5);
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  color: white;
  border-radius: 50%;
  font-weight: 700;
  z-index: 0;

  @media (min-width: 600px) {
    @include scale_timer(1);
  }

  &:before {
    content: '#{$timer_length}';

    @at-root {
      @keyframes timer_beat {
        40%,
        80% {
          transform: none;
        }
        50% {
          transform: scale(1.125);
        }
      }
    }

    @at-root {
      @keyframes timer_countdown {
        @for $i from 0 through $timer_length {
          #{100% / $timer_length * $i} {
            content: '#{-$i + $timer_length}';
          }
        }
      }
    }
  }
  &:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    z-index: -100;
    width: 100%;
    height: 100%;
    background-color: rgba(black, 0.125);

    @at-root {
      @keyframes timer_indicator {
        100% {
          transform: translateY(100%);
        }
      }
    }
  }
}
#answerTimer.active {
  animation: ($timer_unit * $timer_length) ($timer_delay - $timer_unit * 0.125) cubic-bezier(0.9, 0, 0.1, 1) forwards background_color;

  &:before {
    animation: ($timer_unit * $timer_length) $timer_delay forwards timer_countdown, $timer_unit ($timer_delay - $timer_unit * 0.125) $timer_length timer_beat;
  }
  &:after {
    animation: ($timer_unit * $timer_length) $timer_delay linear forwards timer_indicator;
  }
}